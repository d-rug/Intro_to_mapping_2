[["index.html", "03_mapping Overview", " 03_mapping Reed Kenny 2023-06-01 Overview We will go through a fairly simple workflow with spatial data, reading in points and polygons then clipping them to a specific extent and appending some data from one to the other. Then we will map them all together. Packages used in this workshop. rgbif, sf, mapview, tmap "],["reading-in-spatial-data.html", "1 Reading in Spatial Data", " 1 Reading in Spatial Data In this workshop we will look at dowloading species occurence data and plotting it with US forest service administrative boundary layers. We will first download some points from the Global Biodiveristy Information Facitlity. We will use the package rgbif to access the api. library(rgbif) library(dplyr) J.saximontanus &lt;- occ_search(scientificName = &quot;Juncus saximontanus&quot;, hasCoordinate = TRUE) J.sax.points &lt;- J.saximontanus$data %&gt;% select(&quot;scientificName&quot;, &quot;occurrenceRemarks&quot;, &quot;locality&quot;, &quot;associatedTaxa&quot;, &quot;habitat&quot;, &quot;recordedBy&quot;, &quot;eventDate&quot;, &quot;decimalLongitude&quot;, &quot;decimalLatitude&quot;) Since gbif includes many columns of data in the download I have gone ahead and only selected those that may be relevant. The next thing we can do is to use the sf (simple features) package to convert the columns of latitude and longitude data from GBIF into something that R will recognize as spatial data. library(sf) J.sax.points &lt;- J.sax.points %&gt;% st_as_sf(coords = c(&quot;decimalLongitude&quot;,&quot;decimalLatitude&quot;), crs = &quot;+proj=longlat +datum=WGS84 +ellps=WGS84&quot;) Notice here that I had to tell sf which columns are longitude and latitude, (the format is x, y) and I had to specify a CRS (coordinate reference system). When in doubt, most data generated after about 1990 is likley using the WGS 84 system, it’s what all GPS units use. Next we can use the really nifty package mapview, to quickly look at what we downloaded and make sure it makes sense. library(mapview) mapview(J.sax.points) Ok that looks good so now I can pull in a few other layers. I am interested in California occurences of this species, as well as eventually making a map with the California border. So I want to get the California outline on a map. The tigris package is really good for US administrative boundaries as well as a ton of other things like census tract data. For now lets just use it to get the California border. library(tigris) CA &lt;- states() %&gt;% filter(NAME ==&quot;California&quot;) That was easy, now lets see if it worked mapview(CA) Next I want to download the US national forest boundaries as well as ranger district boundaries. These I will have to pull from the USFS website Lets download these data files, unzip them and save them to the data directory. # Download the zip files and unzip. URL &lt;- &quot;https://data.fs.usda.gov/geodata/edw/edw_resources/shp/S_USA.AdministrativeForest.zip&quot; download.file(URL, &quot;data/forest_boundaries.zip&quot;) # Unzip the contents of the temp and save unzipped content in &#39;temp2&#39; unzip(zipfile = &quot;data/forest_boundaries.zip&quot;, exdir = &quot;data/forest_boundaries&quot;) # we will do the same thing for our ranger district boundaries # Download the zip file and save to &#39;temp&#39; URL2 &lt;- &quot;https://data.fs.usda.gov/geodata/edw/edw_resources/shp/S_USA.AdministrativeForest.zip&quot; download.file(URL2, &quot;data/ranger_districts.zip&quot;) # Unzip the contents of the temp and save unzipped content in &#39;temp2&#39; unzip(zipfile = &quot;data/ranger_districts.zip&quot;, exdir = &quot;data/ranger_districts&quot;) Now we can use sf to read in the data, but its already in a spatial format (shapefile), so we can use the st_read function. # Read the shapefiles US_forests &lt;- st_read(&quot;data/forest_boundaries&quot;) districts &lt;- st_read(&quot;data/ranger_districts&quot;) "],["spatial-analyses.html", "2 Spatial Analyses", " 2 Spatial Analyses Awesome! We have a bunch of spatial data layers now, we can do cool stuff with them right …? library(sf) J.sax.cal &lt;- st_intersection(J.sax.points, CA) Oooops! Looks like our CRS systems are not matching, so we need to transform one. Let’s use WGS for everything. I’m just going to copy/paste my CRS definition that I used for the GBIF data. CA &lt;- st_transform(CA, crs = &quot;+proj=longlat +datum=WGS84 +ellps=WGS84&quot;) Ok lets try again library(mapview) J.sax.cal &lt;- st_intersection(J.sax.points, CA) mapview(J.sax.cal) Great, that worked. Now lets also get only the forest boundaries and ranger districts in California. US_forests &lt;- US_forests %&gt;% st_transform(crs = &quot;+proj=longlat +datum=WGS84 +ellps=WGS84&quot;) districts &lt;- districts %&gt;% st_transform(crs = &quot;+proj=longlat +datum=WGS84 +ellps=WGS84&quot;) Cal_forests &lt;- st_intersection(US_forests, CA) Dang! We were being so careful… looks like a geometry error. This is saying that two polygons are sharing a vertex which is does not like. We can try the function st_make_valid, which checks the geometry and will correct situations like this (hopefully) US_forests &lt;- st_make_valid(US_forests) districts &lt;- st_make_valid(districts) Ok lets try again Cal_forests &lt;- st_intersection(US_forests, CA) Cal_districts &lt;- st_intersection(districts, CA) Great, the last analysis thing I want to do is to add the ranger district information to my Juncus points. You could do this with a left join but then I think you would end up with multiple columns of spatial data and it might not work. J.sax.cal &lt;- st_join(J.sax.cal, Cal_districts) View(J.sax.cal) "],["mapping.html", "3 Mapping", " 3 Mapping Ok lets put these all together in a map library(tmap) #tmap_mode(&quot;view&quot;) tmap_mode(&quot;plot&quot;) tm_basemap(&quot;OpenTopoMap&quot;) + tm_shape(CA, bbox = &quot;San Bernardino National Forest&quot;) + tm_borders(&quot;black&quot;, lwd = .5) + tm_shape(Cal_forests) + tm_polygons(col = &quot;FORESTNAME&quot;, palette = &quot;Blues&quot;, title = &quot;National Forest&quot;) + tm_shape(Cal_districts) + tm_borders(&quot;white&quot;, lwd = .5) + tm_shape(J.sax.cal) + tm_dots(col = &quot;red&quot;) + tm_scale_bar(breaks = c(0, 1, 2), text.size = 1, position = c(&quot;left&quot;, &quot;bottom&quot;)) + tm_compass(type = &quot;4star&quot;, position = c(&quot;left&quot;, &quot;bottom&quot;)) + tm_layout(main.title = &quot;Juncus saximontanus sites California&quot;, main.title.size = 1.25, main.title.position=&quot;center&quot;, legend.outside = TRUE, legend.outside.position = &quot;right&quot;, frame = FALSE, legend.width = 3) Thats pretty rad, what if we just want to zoom in on part of the map? We have a few options with tmap. The extend of the map matched the extect of the first layer that you add, so we can make a new layer if we want that corresponds to our area of interest. Let’s say we want to zoom in on the Big Bear region. Bigbear &lt;- Cal_districts %&gt;% filter(ADMINFORES == &quot;99051200010343&quot;) tmap_mode(&quot;view&quot;) tm_basemap(&quot;OpenTopoMap&quot;) + tm_shape(Bigbear) + tm_borders(&quot;black&quot;) + tm_shape(J.sax.cal) + tm_dots(col = &quot;red&quot;) Ok not that bad, but I’d rather be centered on the cluster of points. You can manually set the bounding box to achieve this tmap_mode(&quot;view&quot;) tm_basemap(&quot;OpenTopoMap&quot;) + tm_shape(Cal_districts, bbox = c(-117.60450, 33.96786, -116.63543, 34.41352)) + tm_borders(&quot;black&quot;) + tm_shape(J.sax.cal) + tm_dots(col = &quot;red&quot;) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
